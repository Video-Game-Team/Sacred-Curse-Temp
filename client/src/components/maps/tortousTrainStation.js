import React, { useEffect, useState, useRef } from 'react';
import LeftWalker from '../../assets/images/leftWalker.png';
import RightWalker from '../../assets/images/rightWalker.png';
import UpWalker from '../../assets/images/upWalker.png';
import DownWalker from '../../assets/images/downWalker.png';
import EmptyCanvas from '../../assets/images/newone.png';
import BackgroundImage1 from '../../assets/maps/map 40x 40 w grid.png';
import PlayerSpriteSheet from '../../assets/images/AjFP5.png';

import click1 from '../../audioclips/click1.mp3';
import text from '../../audioclips/Text.mp3';
import SnowMan from '../../audioclips/Snowman.mp3';

import '../../tortousTrainStation.css';

const TortousTrainStation = (props) => {
  //this sets the x Cordinate to transform the map and character location
  const [xTransformVar, setXTransformVar] = useState(-2520);
  //this sets the y Cordinate to transform the map and character location
  const [yTransformVar, setYTransformVar] = useState(-1811);
  //

  const requestRef = useRef();
  //this sets the speed for the map to move. bigger number goes faster
  const speedRef = useRef(4);

  const [tick, setTick] = useState(1);
  //correpsondds with a css class to tell it which version of the sprite to load. ie "left", "right"
  // const [facing.current, setFacing] = useState("right");
  const facing = useRef();
  //corresponds with a css class. determiines if the sprite gets animated or not
  const [walker, setWalker] = useState('false');
  // const [walkerArr, setWalkerkArr]= useState([])
  const dirArr = useRef([]);

  const xBank = useRef(0);
  const yBank = useRef(0);
  const yPlayerIndex = useRef(33);
  const xPlayerIndex = useRef(49);
  const [gridArray, setGridArray] = useState([]);
  const [textValue, setTextValue] = useState(null);

  //Music Playing
  const clickAudio1 = () => new Audio(SnowMan).play();

  // //NPC Dialogue sound effect
  const clickAudio2 = () => new Audio(text).play();

  //Starts off Music Loop
  useEffect(() => {
    {
      clickAudio1();
    }
  }, []);

  // let currentMap2 = [
  //   [
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   ],
  //   [
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   ],
  //   [
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   ],
  //   [
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   ],
  //   [
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   ],
  //   [
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   ],
  //   [
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   ],
  //   [
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   ],
  //   [
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   ],
  //   [
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   ],
  //   [
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   ],
  //   [
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   ],
  //   [
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   ],
  //   [
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   ],
  //   [
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   ],
  //   [
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   ],
  //   [
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   ],
  //   [
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   ],
  //   [
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   ],
  //   [
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   ],
  //   [
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   ],
  //   [
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   ],
  //   [
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   ],
  //   [
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   ],
  //   [
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   ],
  //   [
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   ],
  //   [
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   ],
  //   [
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   ],
  //   [
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   ],
  //   [
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   ],
  //   [
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   ],
  //   [
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   ],
  //   [
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   ],
  //   [
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   ],
  //   [
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   ],
  //   [
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   ],
  //   [
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   ],
  //   [
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   ],
  //   [
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   ],
  //   [
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   ],
  // ];

  let currentMap = [
    [
      15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466,
      1831, 15466, 15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466,
      15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466,
      15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466,
      1119, 1120, 1121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1119, 1120,
      1121, 15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466, 15465,
      15466, 15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466, 15465,
      15466, 15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466, 1831,
      15466, 15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466, 15465,
      15466,
    ],
    [
      15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482,
      1831, 15482, 15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482,
      15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482,
      15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482,
      1240, 1241, 1242, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1240, 1241,
      1242, 15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482, 15481,
      15482, 15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482, 15481,
      15482, 15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482, 1831,
      15482, 15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482, 15481,
      15482,
    ],
    [
      15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466,
      1831, 15466, 15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466,
      15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466,
      15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466,
      1361, 1362, 1363, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1361, 1362,
      1363, 15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466, 15465,
      15466, 15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466, 15465,
      15466, 15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466, 1831,
      15466, 15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466, 15465,
      15466,
    ],
    [
      15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482,
      1831, 15482, 15481, 15482, 15481, 15482, 15125, 15126, 15127, 15128,
      15129, 15130, 15131, 15132, 15481, 15482, 15481, 15482, 15481, 15482,
      15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15481, 15482,
      15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482,
      15481, 15482, 15481, 15482, 15481, 15482, 15481, 15125, 15126, 15127,
      15128, 15129, 15130, 15131, 15132, 15482, 1831, 15482, 15481, 15482,
      15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482,
    ],
    [
      15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466,
      1831, 15466, 15465, 15466, 15465, 15466, 15141, 15142, 15143, 15144,
      15145, 15146, 15147, 14941, 14942, 14943, 14944, 14941, 14942, 14943,
      14944, 14941, 14942, 14943, 14944, 14941, 14942, 14943, 14944, 14941,
      14942, 14943, 14944, 14941, 14942, 14943, 14944, 14941, 14942, 14943,
      14944, 14941, 14942, 14943, 14944, 14941, 14942, 14943, 14944, 14941,
      14942, 14943, 14944, 14941, 14942, 14943, 14944, 14941, 14942, 14943,
      14944, 14941, 14942, 14943, 14944, 14941, 14942, 14943, 14944, 15141,
      15142, 15143, 15144, 15145, 15146, 15147, 15148, 15466, 1831, 15466,
      15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466,
    ],
    [
      15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482,
      1831, 15482, 15481, 15482, 15481, 15482, 15157, 15158, 15159, 15160,
      15161, 15162, 15163, 14957, 14958, 14959, 14960, 14957, 14958, 14959,
      14960, 14957, 14958, 14959, 14960, 14957, 14958, 14959, 14960, 14957,
      14958, 14959, 14960, 14957, 14958, 14959, 14960, 14957, 14958, 14959,
      14960, 14957, 14958, 14959, 14960, 14957, 14958, 14959, 14960, 14957,
      14958, 14959, 14960, 14957, 14958, 14959, 14960, 14957, 14958, 14959,
      14960, 14957, 14958, 14959, 14960, 14957, 14958, 14959, 14960, 15157,
      15158, 15159, 15160, 15161, 15162, 15163, 15164, 15482, 1831, 15482,
      15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482,
    ],
    [
      15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466,
      1831, 15466, 15465, 15466, 15465, 15180, 15173, 15174, 15175, 15176,
      15177, 15178, 15179, 15180, 15180, 15180, 15180, 15180, 15180, 15180,
      15180, 15180, 15180, 15180, 15180, 15180, 15180, 15180, 15180, 15180,
      15180, 15180, 15180, 15180, 15180, 15180, 15180, 15180, 15180, 15180,
      15180, 15180, 15180, 15180, 15180, 15180, 15180, 15180, 15180, 15180,
      15180, 15180, 15180, 15180, 15180, 15180, 15180, 15180, 15180, 15180,
      15180, 15180, 15180, 15180, 15180, 15180, 15180, 15180, 15180, 15173,
      15174, 15175, 15176, 15177, 15178, 15179, 15180, 15466, 1831, 15466,
      15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466,
    ],
    [
      15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482,
      1831, 15482, 14939, 14940, 15481, 15482, 15481, 15482, 14939, 14940,
      15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482,
      15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482,
      15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482,
      15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482,
      15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482,
      15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482,
      15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482, 1831, 15482,
      15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482,
    ],
    [
      15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466, 15465, 14952,
      14953, 14954, 14955, 14956, 15017, 15018, 14954, 15020, 15018, 14954,
      15020, 15018, 14954, 15020, 15018, 14954, 15020, 15018, 14954, 15020,
      15018, 14954, 15020, 15018, 14954, 15020, 15018, 14954, 15020, 15018,
      14954, 15020, 15018, 14954, 15020, 15018, 14954, 15020, 15018, 14954,
      15020, 15018, 14954, 15020, 15018, 14954, 15020, 15018, 14954, 15020,
      15018, 14954, 15020, 15018, 14954, 15020, 15018, 14954, 15020, 15018,
      14954, 15020, 15018, 14954, 15020, 15018, 14954, 15020, 15018, 14954,
      15020, 15018, 14954, 15020, 15018, 14954, 15020, 15018, 14954, 15020,
      14997, 14998, 15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466,
    ],
    [
      15342, 15342, 15342, 15342, 15342, 15342, 15342, 15342, 15342, 14968,
      14969, 14970, 14971, 14972, 15033, 15034, 15035, 15036, 15034, 15035,
      15036, 15034, 15035, 15036, 15034, 15035, 15036, 15034, 15035, 15036,
      15034, 15035, 15036, 15034, 15035, 15036, 15034, 15035, 15036, 15034,
      15035, 15036, 15034, 15035, 15036, 15034, 15035, 15036, 15034, 15035,
      15036, 15034, 15035, 15036, 15034, 15035, 15036, 15034, 15035, 15036,
      15034, 15035, 15036, 15034, 15035, 15036, 15034, 15035, 15036, 15034,
      15035, 15036, 15034, 15035, 15036, 15034, 15035, 15036, 15034, 15035,
      15036, 15034, 15035, 15036, 15034, 15035, 15036, 15034, 15035, 15036,
      15013, 15014, 15342, 15342, 15342, 15342, 15342, 15342, 15342, 15342,
    ],
    [
      15358, 15358, 15358, 15358, 15358, 15358, 15358, 15358, 15358, 14984,
      14985, 14986, 14987, 14988, 15049, 15050, 15051, 15052, 15050, 15051,
      15052, 15050, 15051, 15052, 15050, 15051, 15052, 15050, 15051, 15052,
      15050, 15051, 15052, 15050, 15051, 15052, 15050, 15051, 15052, 15050,
      15051, 15052, 15050, 15051, 15052, 15050, 15051, 15052, 15050, 15051,
      15052, 15050, 15051, 15052, 15050, 15051, 15052, 15050, 15051, 15052,
      15050, 15051, 15052, 15050, 15051, 15052, 15050, 15051, 15052, 15050,
      15051, 15052, 15050, 15051, 15052, 15050, 15051, 15052, 15050, 15051,
      15052, 15050, 15051, 15052, 15050, 15051, 15052, 15050, 15051, 15052,
      15029, 15030, 15358, 15358, 15358, 15358, 15358, 15358, 15358, 15358,
    ],
    [
      15374, 15374, 15374, 15374, 15374, 15374, 15374, 15374, 15374, 15000,
      15061, 15062, 15063, 15064, 15065, 15066, 15067, 15068, 15061, 15062,
      15063, 15064, 15065, 15066, 15067, 15068, 15061, 15062, 15063, 15064,
      15065, 15066, 15067, 15068, 15061, 15062, 15063, 15064, 15065, 15066,
      15067, 15068, 15061, 15062, 15063, 15064, 15065, 15066, 15067, 15068,
      15061, 15062, 15063, 15064, 15065, 15066, 15067, 15068, 15061, 15062,
      15063, 15064, 15065, 15066, 15067, 15068, 15061, 15062, 15063, 15064,
      15065, 15066, 15067, 15068, 15061, 15062, 15063, 15064, 15065, 15066,
      15067, 15068, 15061, 15062, 15063, 15064, 15065, 15066, 15067, 15068,
      15045, 15046, 15374, 15374, 15374, 15374, 15374, 15374, 15374, 15374,
    ],
    [
      15390, 15390, 15390, 15390, 15390, 15390, 15390, 15390, 15390, 15390,
      1831, 15390, 15390, 15390, 15390, 15390, 15390, 15390, 15390, 15390,
      15390, 15390, 15390, 15390, 15390, 15390, 15390, 15390, 15390, 15390,
      15390, 15390, 15390, 15390, 15390, 15390, 15390, 15390, 15390, 15390,
      15390, 15390, 15390, 15390, 15390, 15390, 15390, 15390, 15390, 15390,
      15390, 15390, 15390, 15390, 15390, 15390, 15390, 15390, 15390, 15390,
      15390, 15390, 15390, 15390, 15390, 15390, 15390, 15390, 15390, 15390,
      15390, 15390, 15390, 15390, 15390, 15390, 15390, 15390, 15390, 15390,
      15390, 15390, 15390, 15390, 15390, 15390, 15390, 15390, 1831, 15390,
      15390, 15390, 15390, 15390, 15390, 15390, 15390, 15390, 15390, 15390,
    ],
    [
      15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482,
      1831, 15482, 1, 1, 15481, 15482, 15125, 15126, 15127, 15128, 15129, 15130,
      15131, 15132, 15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482,
      15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482,
      15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482,
      15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482,
      15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482,
      15481, 15482, 15481, 15482, 15481, 15482, 15481, 15125, 15126, 15127,
      15128, 15129, 15130, 15131, 15132, 15482, 1831, 15482, 15481, 15482,
      15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482,
    ],
    [
      15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466,
      1831, 15466, 15465, 15466, 15465, 15148, 15141, 15142, 15143, 15144,
      15145, 15146, 15147, 14941, 14942, 14943, 14944, 14941, 14942, 14943,
      14944, 14941, 14942, 14943, 14944, 14941, 14942, 14943, 14944, 14941,
      14942, 14943, 14944, 14941, 14942, 14943, 14944, 14941, 14942, 14943,
      14944, 14941, 14942, 14943, 15125, 15126, 15127, 15128, 15129, 15130,
      15131, 15132, 14944, 14941, 14942, 14943, 14944, 14941, 14942, 14943,
      14944, 14941, 14942, 14943, 14944, 14941, 14942, 14943, 14944, 15141,
      15142, 15143, 15144, 15145, 15146, 15147, 15148, 15466, 1831, 15466,
      15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466,
    ],
    [
      15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482,
      1831, 15482, 15481, 15482, 15481, 15164, 15157, 15158, 15159, 15160,
      15161, 15162, 15163, 14957, 14958, 14959, 14960, 14957, 14958, 14959,
      14960, 14957, 14958, 14959, 14960, 14957, 14958, 14959, 14960, 14957, 0,
      0, 0, 14957, 14958, 14959, 14960, 14957, 14958, 14959, 14960, 14957,
      14958, 14959, 15141, 15142, 15143, 0, 0, 0, 15147, 15148, 14960, 14957,
      14958, 14959, 14960, 14957, 14958, 14959, 14960, 14957, 14958, 14959,
      14960, 14957, 14958, 14959, 14960, 15157, 15158, 15159, 15160, 15161,
      15162, 15163, 15164, 15482, 1831, 15482, 15481, 15482, 15481, 15482,
      15481, 15482, 15481, 15482, 15481, 15482,
    ],
    [
      15465, 1948, 1949, 1950, 15465, 15466, 15465, 15466, 15465, 15466, 1831,
      15466, 15465, 15466, 15465, 15180, 15173, 1948, 1949, 1950, 15177, 15178,
      15179, 15180, 15180, 15180, 15180, 15180, 15180, 15180, 15180, 15180,
      15180, 15180, 15180, 15180, 1948, 1949, 1950, 15180, 1119, 1120, 1121,
      15180, 15180, 15180, 15180, 15180, 15180, 15180, 15180, 15180, 15180,
      15180, 15157, 15158, 15159, 1119, 1120, 1121, 15163, 1948, 1949, 1950,
      15180, 15180, 15180, 15180, 15180, 15180, 15180, 15180, 15180, 15180,
      15180, 15180, 15180, 15180, 1948, 1949, 1950, 15175, 15176, 15177, 15178,
      15179, 15180, 15466, 1831, 15466, 15465, 15466, 15465, 15466, 15465,
      15466, 1948, 1949, 1950, 15466,
    ],
    [
      15481, 2069, 2070, 2071, 15481, 15482, 15481, 15482, 15481, 15482, 1831,
      15482, 15481, 15482, 15481, 15482, 15481, 2069, 2070, 2071, 15481, 15482,
      15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482,
      15481, 15482, 15481, 15482, 2069, 2070, 2071, 15482, 1240, 1241, 1242, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15173, 15174, 15175, 1240, 1241, 1242,
      15179, 2069, 2070, 2071, 15481, 15482, 15481, 15482, 15481, 15482, 15481,
      15482, 15481, 15482, 15481, 15482, 15481, 15482, 2069, 2070, 2071, 15482,
      15481, 15482, 15481, 15482, 15481, 15482, 1831, 15482, 15481, 15482,
      15481, 15482, 15481, 15482, 2069, 2070, 2071, 15482,
    ],
    [
      15465, 2190, 2191, 2192, 15465, 15466, 15465, 15466, 15465, 15466, 1831,
      15466, 15465, 15466, 15465, 15466, 15465, 2190, 2191, 2192, 15465, 15466,
      15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466,
      15465, 15466, 15465, 15466, 2190, 2191, 2192, 15466, 1361, 1362, 1363, 0,
      0, 0, 0, 0, 0, 16016, 16017, 0, 0, 0, 0, 0, 0, 1361, 1362, 1363, 15465,
      2190, 2191, 2192, 15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466,
      15465, 15466, 15465, 15466, 15465, 15466, 2190, 2191, 2192, 15466, 15465,
      15466, 15465, 15466, 15465, 15466, 1831, 15466, 15465, 15466, 15465,
      15466, 15465, 15466, 2190, 2191, 2192, 15466,
    ],
    [
      15481, 2311, 2312, 2313, 15481, 15482, 15481, 15482, 15481, 15482, 1831,
      15482, 15481, 15482, 15481, 15482, 15481, 2311, 2312, 2313, 15481, 15482,
      15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482,
      15481, 15482, 15481, 15482, 2311, 2312, 2313, 15482, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 16034, 16035, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15481, 2311, 2312, 2313,
      15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482,
      15481, 15482, 15481, 15482, 2311, 2312, 2313, 15482, 15481, 15482, 15481,
      15482, 15481, 15482, 1831, 15482, 15481, 15482, 15481, 15482, 15481,
      15482, 2311, 2312, 2313, 15482,
    ],
    [
      15465, 2432, 2433, 2434, 15465, 15466, 15465, 15466, 15465, 15466, 1831,
      15466, 15465, 15466, 15465, 15466, 15465, 2432, 2433, 2434, 15465, 15466,
      15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466,
      15465, 15466, 15465, 15466, 2432, 2433, 2434, 15466, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 16052, 16053, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15465, 2432, 2433, 2434,
      15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466,
      15465, 15466, 15465, 15466, 2432, 2433, 2434, 15466, 15465, 15466, 15465,
      15466, 15465, 15466, 1831, 15466, 15465, 15466, 15465, 15466, 15465,
      15466, 2432, 2433, 2434, 15466,
    ],
    [
      15481, 0, 0, 0, 15481, 0, 0, 0, 15481, 0, 0, 0, 15481, 0, 0, 0, 15481, 0,
      0, 0, 15481, 0, 0, 0, 15481, 0, 0, 0, 15481, 0, 0, 0, 15481, 0, 0, 0,
      15481, 0, 0, 0, 1119, 1120, 1121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 1119, 1120, 1121, 0, 0, 0, 15482, 0, 0, 0, 15482, 0, 0, 0, 15482, 0, 0,
      0, 15482, 0, 0, 0, 15482, 0, 0, 0, 15482, 0, 0, 0, 15482, 1831, 0, 0,
      15482, 0, 0, 0, 15482, 0, 0, 0, 15482,
    ],
    [
      15465, 1119, 1120, 1121, 15465, 1119, 1120, 1121, 15465, 1119, 1120, 1121,
      15465, 1119, 1120, 1121, 15465, 1119, 1120, 1121, 15465, 1119, 1120, 1121,
      15465, 1119, 1120, 1121, 15465, 1119, 1120, 1121, 15465, 1119, 1120, 1121,
      15465, 1119, 1120, 1121, 1240, 1241, 1242, 15815, 15814, 15815, 15814,
      15815, 15824, 15825, 15824, 15825, 15814, 15815, 15814, 15815, 15814,
      1240, 1241, 1242, 1119, 1120, 1121, 15466, 1119, 1120, 1121, 15466, 1119,
      1120, 1121, 15466, 1119, 1120, 1121, 15466, 1119, 1120, 1121, 15466, 1119,
      1120, 1121, 15466, 1119, 1120, 1121, 15466, 1119, 1120, 1121, 15466, 1119,
      1120, 1121, 15466, 1119, 1120, 1121, 15466,
    ],
    [
      15481, 1240, 1241, 1242, 15481, 1240, 1241, 1242, 15481, 1240, 1241, 1242,
      15481, 1240, 1241, 1242, 15481, 1240, 1241, 1242, 15481, 1240, 1241, 1242,
      15481, 1240, 1241, 1242, 15481, 1240, 1241, 1242, 15481, 1240, 1241, 1242,
      15481, 1240, 1241, 1242, 1361, 1362, 1363, 15834, 15833, 15834, 15833,
      15834, 15843, 15844, 15843, 15844, 15833, 15834, 15833, 15834, 15833,
      1361, 1362, 1363, 1240, 1241, 1242, 15482, 1240, 1241, 1242, 15482, 1240,
      1241, 1242, 15482, 1240, 1241, 1242, 15482, 1240, 1241, 1242, 15482, 1240,
      1241, 1242, 15482, 1240, 1241, 1242, 15482, 16340, 16341, 16342, 16340,
      16341, 16342, 16340, 16341, 16342, 16340, 16341, 16342,
    ],
    [
      0, 1361, 1362, 1363, 0, 1361, 1362, 1363, 0, 1361, 1362, 1363, 0, 1361,
      1362, 1363, 0, 1361, 1362, 1363, 0, 1361, 1362, 1363, 0, 1361, 1362, 1363,
      0, 1361, 1362, 1363, 0, 1361, 1362, 1363, 0, 1361, 1362, 1363, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1361, 1362, 1363, 0, 1361,
      1362, 1363, 0, 1361, 1362, 1363, 0, 1361, 1362, 1363, 0, 1361, 1362, 1363,
      0, 1361, 1362, 1363, 0, 1361, 1362, 1363, 0, 16348, 16349, 16350, 16348,
      16349, 16350, 16348, 16349, 16350, 16348, 16349, 16350,
    ],
    [
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16356, 16357, 16358, 16356, 16357,
      16358, 16356, 16357, 16358, 16356, 16357, 16358,
    ],
    [
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1831, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16365, 16366, 16364, 16365,
      16366, 16364, 16365, 16366, 16364, 16365, 16366,
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1839,
      1840,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      'Barrier',
      'Barrier',
      16372,
      0,
      0,
      0,
      16373,
      0,
      0,
      0,
      16374,
    ],
    [
      0, 1119, 1120, 1121, 0, 1119, 1120, 1121, 0, 1119, 1120, 1121, 0, 1119,
      1120, 1121, 0, 1119, 1120, 1121, 0, 1119, 1120, 1121, 0, 1119, 1120, 1121,
      0, 1119, 1120, 1121, 0, 1119, 1120, 1121, 0, 1119, 1120, 1121, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 1960, 1961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1119, 1120, 1121, 0,
      1119, 1120, 1121, 0, 1119, 1120, 1121, 0, 1119, 1120, 1121, 0, 1119, 1120,
      1121, 0, 1119, 1120, 1121, 0, 1119, 1120, 1121, 1, 1119, 1120, 1121,
      16364, 1119, 1120, 1121, 16366, 1119, 1120, 1121, 16366,
    ],
    [
      0, 1240, 1241, 1242, 0, 1240, 1241, 1242, 0, 1240, 1241, 1242, 0, 1240,
      1241, 1242, 0, 1240, 1241, 1242, 0, 1240, 1241, 1242, 0, 1240, 1241, 1242,
      0, 1240, 1241, 1242, 0, 1240, 1241, 1242, 0, 1240, 1241, 1242, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 2081, 2082, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1240, 1241, 1242, 0,
      1240, 1241, 1242, 0, 1240, 1241, 1242, 0, 1240, 1241, 1242, 0, 1240, 1241,
      1242, 0, 1240, 1241, 1242, 0, 1240, 1241, 1242, 1, 1240, 1241, 1242,
      16372, 1240, 1241, 1242, 16374, 1240, 1241, 1242, 16374,
    ],
    [
      0, 1361, 1362, 1363, 0, 1361, 1362, 1363, 0, 1361, 1362, 1363, 0, 1361,
      1362, 1363, 0, 1361, 1362, 1363, 0, 1361, 1362, 1363, 0, 1361, 1362, 1363,
      0, 1361, 1362, 1363, 0, 1361, 1362, 1363, 0, 1361, 1362, 1363, 1, 1, 1, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1361, 1362, 1363, 0, 1361,
      1362, 1363, 0, 1361, 1362, 1363, 0, 1361, 1362, 1363, 0, 1361, 1362, 1363,
      0, 1361, 1362, 1363, 0, 1361, 1362, 1363, 0, 1361, 1362, 1363, 0, 1361,
      1362, 1363, 0, 1361, 1362, 1363, 0,
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1119,
      1120,
      1121,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1119,
      1120,
      1121,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      'Barrier',
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
    ],
    [
      15465, 1948, 1949, 1950, 15465, 15466, 15465, 15466, 15465, 15466, 1831,
      15466, 15465, 15466, 15465, 15466, 15465, 1948, 1949, 1950, 15465, 15466,
      15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466,
      15465, 15466, 15465, 15466, 1948, 1949, 1950, 15466, 1240, 1241, 1242, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1240, 1241, 1242, 15465, 1948,
      1949, 1950, 15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466, 15465,
      15466, 15465, 15466, 15465, 15466, 1948, 1949, 1950, 15466, 15465, 15466,
      15465, 15466, 15465, 15466, 1831, 15466, 15465, 15466, 15465, 15466,
      15465, 15466, 1948, 1949, 1950, 15466,
    ],
    [
      15481,
      2069,
      2070,
      2071,
      15481,
      15482,
      15481,
      15482,
      15481,
      15482,
      1831,
      15482,
      15481,
      15482,
      15481,
      15482,
      15481,
      2069,
      2070,
      2071,
      15481,
      15482,
      15481,
      15482,
      15481,
      15482,
      15481,
      15482,
      15481,
      15482,
      15481,
      15482,
      15481,
      15482,
      15481,
      15482,
      2069,
      2070,
      2071,
      15482,
      1361,
      1362,
      1363,
      'Barrier',
      'Barrier',
      'Barrier',
      'Barrier',
      'Barrier',
      0,
      0,
      0,
      0,
      'Barrier',
      'Barrier',
      'Barrier',
      'Barrier',
      'Barrier',
      1361,
      1362,
      1363,
      15481,
      2069,
      2070,
      2071,
      15481,
      15482,
      15481,
      15482,
      15481,
      15482,
      15481,
      15482,
      15481,
      15482,
      15481,
      15482,
      15481,
      15482,
      2069,
      2070,
      2071,
      15482,
      15481,
      15482,
      15481,
      15482,
      15481,
      15482,
      1831,
      15482,
      15481,
      15482,
      15481,
      15482,
      15481,
      15482,
      2069,
      2070,
      2071,
      15482,
    ],
    [
      15465, 2190, 2191, 2192, 15465, 15466, 15465, 15466, 15465, 15466, 1831,
      15466, 15465, 15466, 15465, 15466, 15465, 2190, 2191, 2192, 15465, 15466,
      15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466,
      15465, 15466, 15465, 15466, 2190, 2191, 2192, 15466, 0, 0, 0, 0, 0, 0, 0,
      16340, 16341, 0, 0, 16341, 16342, 0, 0, 0, 0, 0, 0, 0, 15465, 2190, 2191,
      2192, 15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466, 15465,
      15466, 15465, 15466, 15465, 15466, 2190, 2191, 2192, 15466, 15465, 15466,
      15465, 15466, 15465, 15466, 1831, 15466, 15465, 15466, 15465, 15466,
      15465, 15466, 2190, 2191, 2192, 15466,
    ],
    [
      15481, 2311, 2312, 2313, 15481, 15482, 15481, 15482, 15481, 15482, 1831,
      15482, 15481, 15482, 15481, 15482, 15481, 2311, 2312, 2313, 15481, 15482,
      15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482,
      15481, 15482, 15481, 15482, 2311, 2312, 2313, 15482, 0, 0, 0, 0, 0, 0, 0,
      16348, 16349, 16350, 16348, 16349, 16350, 0, 0, 0, 0, 0, 0, 0, 15481,
      2311, 2312, 2313, 15481, 15482, 15481, 15482, 15481, 15482, 15481, 15482,
      15481, 15482, 15481, 15482, 15481, 15482, 2311, 2312, 2313, 15482, 15481,
      15482, 15481, 15482, 15481, 15482, 1831, 15482, 15481, 15482, 15481,
      15482, 15481, 15482, 2311, 2312, 2313, 15482,
    ],
    [
      15465, 2432, 2433, 2434, 15465, 15466, 15465, 15466, 15465, 15466, 1831,
      15466, 15465, 15466, 15465, 15466, 15465, 2432, 2433, 2434, 15465, 15466,
      15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466,
      15465, 15466, 15465, 15466, 2432, 2433, 2434, 15466, 1119, 1120, 1121, 0,
      0, 0, 0, 16356, 16357, 16358, 16356, 16357, 16358, 0, 0, 0, 0, 1119, 1120,
      1121, 15465, 2432, 2433, 2434, 15465, 15466, 15465, 15466, 15465, 15466,
      15465, 15466, 15465, 15466, 15465, 15466, 15465, 15466, 2432, 2433, 2434,
      15466, 15465, 15466, 15465, 15466, 15465, 15466, 1831, 15466, 15465,
      15466, 15465, 15466, 15465, 15466, 2432, 2433, 2434, 15466,
    ],
    [
      1354, 1355, 1356, 15482, 1354, 1355, 1356, 15482, 1354, 1355, 1831, 15482,
      1354, 1355, 1356, 15482, 1354, 1355, 1356, 15482, 1354, 1355, 1356, 15482,
      1354, 1355, 1356, 15482, 1354, 1355, 1356, 15482, 1354, 1355, 1356, 15482,
      1354, 1355, 1356, 15482, 1240, 1241, 1242, 0, 0, 0, 0, 16340, 16341,
      16342, 16340, 16341, 16342, 0, 0, 0, 0, 1240, 1241, 1242, 15481, 1354,
      1355, 1356, 15481, 1354, 1355, 1356, 15481, 1354, 1355, 1356, 15481, 1354,
      1355, 1356, 15481, 1354, 1355, 1356, 15481, 1354, 1355, 1356, 15481, 1354,
      1355, 1356, 1831, 1354, 1355, 1356, 15481, 1354, 1355, 1356, 15481, 1354,
      1355, 1356,
    ],
    [
      1475, 1476, 1477, 15466, 1475, 1476, 1477, 15466, 1475, 1476, 1477, 15466,
      1475, 1476, 1477, 15466, 1475, 1476, 1477, 15466, 1475, 1476, 1477, 15466,
      1475, 1476, 1477, 15466, 1475, 1476, 1477, 15466, 1475, 1476, 1477, 15466,
      1475, 1476, 1477, 15466, 1361, 1362, 1363, 0, 0, 0, 0, 16348, 16349,
      16350, 16348, 16349, 16350, 0, 0, 0, 0, 1361, 1362, 1363, 15465, 1475,
      1476, 1477, 15465, 1475, 1476, 1477, 15465, 1475, 1476, 1477, 15465, 1475,
      1476, 1477, 15465, 1475, 1476, 1477, 15465, 1475, 1476, 1477, 15465, 1475,
      1476, 1477, 15465, 1475, 1476, 1477, 15465, 1475, 1476, 1477, 15465, 1475,
      1476, 1477,
    ],
    [
      1596, 1597, 1598, 15482, 1596, 1597, 1598, 15482, 1596, 1597, 1598, 15482,
      1596, 1597, 1598, 15482, 1596, 1597, 1598, 15482, 1596, 1597, 1598, 15482,
      1596, 1597, 1598, 15482, 1596, 1597, 1598, 15482, 1596, 1597, 1598, 15482,
      1596, 1597, 1598, 15482, 0, 0, 0, 0, 0, 0, 0, 16356, 16357, 16358, 16356,
      16357, 16358, 0, 0, 0, 0, 0, 0, 0, 15481, 1596, 1597, 1598, 15481, 1596,
      1597, 1598, 15481, 1596, 1597, 1598, 15481, 1596, 1597, 1598, 15481, 1596,
      1597, 1598, 15481, 1596, 1597, 1598, 15481, 1596, 1597, 1598, 15481, 1596,
      1597, 1598, 15481, 1596, 1597, 1598, 15481, 1596, 1597, 1598,
    ],
  ];

  console.log('COORDINATE', yPlayerIndex.current, xPlayerIndex.current);
  console.log(
    'VALUE Right',
    currentMap[yPlayerIndex.current][xPlayerIndex.current]
  );

  // useEffect(()=>{
  //   let tempGrid=[]
  //   for (let i=0; i<currentMap.length; i++){
  //     for (let j=0; j<currentMap[i].length; j++){
  //       tempGrid.push(
  //         <button
  //           onClick={() => {
  //             console.log(`Coordinates ${i} - ${j}`);
  //           }}
  //           className="numbers"
  //           style={{
  //             gridColumn: j + 1,
  //             gridRow: i + 1,
  //             color: 'white',
  //           }}
  //         >
  //           {/* {i} - {j} */}
  //           {currentMap[i][j]}
  //         </button>
  //       );
  //     }
  //   }
  // setGridArray(tempGrid)
  // },[])

  useEffect(() => {
    if (props.previousMap === 'tortous') {
      //setYCord
      yPlayerIndex.current = 27;
      //setXcord
      xPlayerIndex.current = 87;
      //set xTransform
      setXTransformVar(-4948);
      //set yTransform
      setYTransformVar(-1427);
      facing.current = 'left';
    }
  }, []);

  useEffect(() => {
    //yPlayerIndex up and down values
    // trains Map check conditions
    if (
      (yPlayerIndex.current === 26 && xPlayerIndex.current === 88) ||
      (yPlayerIndex.current === 27 && xPlayerIndex.current === 88)
    ) {
      props.active('tortous', 'tortousTrainStation');
    }
  }, [xPlayerIndex.current]);




  //OVERWOLRD ITEM CHECK LOGIC
  useEffect(() => {
    const dialogueAction = (event) => {
      if (event.key === 'b') {
        //Facing up
        if (facing.current === 'up') {
          if (
            (yPlayerIndex.current === 26 && xPlayerIndex.current === 86) 

          ) {
            setTextValue('Welcome To Hub Haviv');
          }
        }

        //Facing left
        if (facing.current === 'left') {
          if (
            (yPlayerIndex.current === 32 && xPlayerIndex.current === 48) ||
            (
              yPlayerIndex.current === 32 && xPlayerIndex.current === 47
            )
          ) {
            setTextValue('Welcome To Hub Haviv');
          }
        }
      }
    };
    window.addEventListener('keydown', dialogueAction);
    return () => {
      window.removeEventListener('keydown', dialogueAction);
    };
  }, []);




  //event listen for enter
  useEffect(() => {
    window.addEventListener('keydown', (e) => {
      if (e.key === 'Enter') {
        if (facing.current === 'up') {
          if (
            xBank.current + 32 > 64 &&
            currentMap[yPlayerIndex.current - 1][xPlayerIndex.current + 1] ===
              'door1'
          ) {
          }
          if (
            currentMap[yPlayerIndex.current - 1][xPlayerIndex.current] ===
              'sign1' &&
            64 - xBank.current > 32
          ) {
            console.log('sign1');
          }
          if (
            xBank.current + 32 > 64 &&
            currentMap[yPlayerIndex.current - 1][xPlayerIndex.current + 1] ===
              'sign2'
          ) {
            console.log('sign2');
          }
          if (
            currentMap[yPlayerIndex.current - 1][xPlayerIndex.current] ===
              'sign2' &&
            64 - xBank.current > 32
          ) {
            console.log('sign2');
          }
        }
        if (facing.current == null) {
          if (
            currentMap[yPlayerIndex.current + 1][xPlayerIndex.current] ===
              'sign1' &&
            xBank.current + 32 < 64
          ) {
            console.log('sign1');
          }
          if (
            currentMap[yPlayerIndex.current + 1][xPlayerIndex.current + 1] ===
            'sign2'
          ) {
            console.log('poopshit');
          }
          if (
            currentMap[yPlayerIndex.current + 1][xPlayerIndex.current] ===
              'sign2' &&
            xBank.current + 32 < 64
          ) {
            console.log('sign2');
          }
        }
      }
    });
  }, []);

  //listens for the current down key and saves it as the currentkey state
  //wrapping in a useEffect prevents compounding event listeners
  useEffect(() => {
    const keyDownHandler = (event) => {
      // console.log(event.key)

      if (
        event.key === 'ArrowRight' ||
        event.key === 'ArrowLeft' ||
        event.key === 'ArrowUp' ||
        event.key === 'ArrowDown'
      ) {
        let newArr = dirArr.current;
        // if the key stroke is not in the array
        if (newArr.indexOf(event.key) == -1) {
          newArr.unshift(event.key);

          dirArr.current = newArr;
          setTick((prevCount) => prevCount + 1);
        }
        setTextValue(null);
      }
    };

    window.addEventListener('keydown', keyDownHandler);

    const keyUpHandler = (event) => {
      if (dirArr.current.indexOf(event.key) > -1) {
        let newArr2 = dirArr.current.filter((el) => el != event.key);
        dirArr.current = newArr2;
        setTick((prevCount) => prevCount + 1);
      }
    };
    window.addEventListener('keyup', keyUpHandler);

    return () => {
      window.removeEventListener('keydown', keyDownHandler);
      window.removeEventListener('keyup', keyUpHandler);
    };

    //when the key is lifted it sets the current key to null to stop map movement and the walker to false to stop the animation
  }, []);

  //facing logic. It needed to be removed from the animate because it was cuasing
  dirArr.current[0] === 'ArrowRight'
    ? (facing.current = 'right')
    : dirArr.current[0] === 'ArrowLeft'
    ? (facing.current = 'left')
    : dirArr.current[0] === 'ArrowUp'
    ? (facing.current = 'up')
    : dirArr.current[0] == 'ArrowDown'
    ? (facing.current = null)
    : null;

  //animate is a reccursive function that takes the current key and updates the cordinate variables depending on which direction is pushed. It also sets which way the character is facing
  const animate = () => {
    //if current key is d, the x cordinate becomes  the previous state + the speed

    if (dirArr.current[0] === 'ArrowRight') {
      if (
        currentMap[yPlayerIndex.current][xPlayerIndex.current + 1] === 0 ||
        xBank.current < 0
      )
        if (
          yBank.current + 32 < 64 ||
          currentMap[yPlayerIndex.current - 1][xPlayerIndex.current + 1] == 0
        ) {
          {
            setXTransformVar((prevCount) => prevCount - speedRef.current);
            // console.log(newMap[yPlayerIndex.current][xPlayerIndex.current+1])
            xBank.current = xBank.current + speedRef.current;
            // console.log(yPlayerIndex.current,xPlayerIndex.current)
            if (xBank.current === 64) {
              xPlayerIndex.current = xPlayerIndex.current + 1;

              xBank.current = 0;
            }
          }
        }
    }
    //if current key is a, the x cordinate becomes  the previous state - the speed

    if (dirArr.current[0] === 'ArrowLeft') {
      if (
        currentMap[yPlayerIndex.current][xPlayerIndex.current - 1] === 0 ||
        xBank.current > 0
      )
        if (
          yBank.current + 32 < 64 ||
          currentMap[yPlayerIndex.current - 1][xPlayerIndex.current] == 0
        ) {
          {
            setXTransformVar((prevCount) => prevCount + speedRef.current);
            xBank.current = xBank.current - speedRef.current;
            // console.log(yPlayerIndex.current,xPlayerIndex.current)

            if (xBank.current < 0) {
              // console.log("this one",xBank.current)

              xPlayerIndex.current = xPlayerIndex.current - 1;
              // console.log(yPlayerIndex.current, xPlayerIndex.current);
              // alert(xPlayerIndex.current)
              xBank.current = 60;
            }
          }
        }
    }

    //if current key is w, the y cordinate becomes  the previous state + the speed
    if (dirArr.current[0] === 'ArrowUp') {
      if (
        currentMap[yPlayerIndex.current - 1][xPlayerIndex.current] === 0 ||
        yBank.current < 0
      ) {
        if (
          xBank.current + 48 < 64 ||
          currentMap[yPlayerIndex.current - 1][xPlayerIndex.current + 1] == 0
        ) {
          setYTransformVar((prevCount) => prevCount + speedRef.current);
          // console.log(yPlayerIndex.current,xPlayerIndex.current)
          yBank.current = yBank.current + speedRef.current;
          if (yBank.current === 64) {
            yPlayerIndex.current = yPlayerIndex.current - 1;
            yBank.current = 0;
          }
        }
      }
    }
    //if current key is s, the y cordinate becomes  the previous state - the speed

    if (dirArr.current[0] === 'ArrowDown') {
      if (
        currentMap[yPlayerIndex.current + 1][xPlayerIndex.current] === 0 ||
        yBank.current > 0
      ) {
        // if (xBank.current+32<64 || newMap[yPlayerIndex.current+1][xPlayerIndex.current+1]==0)
        if (
          xBank.current < 16 ||
          currentMap[yPlayerIndex.current][xPlayerIndex.current + 1] == 0
        ) {
          setYTransformVar((prevCount) => prevCount - speedRef.current);
          yBank.current = yBank.current - speedRef.current;
          if (yBank.current < 0) {
            yPlayerIndex.current = yPlayerIndex.current + 1;
            yBank.current = 60;
          }
        }
      }
    }
    requestRef.current = requestAnimationFrame(animate);
  };

  //every time the current key changes this runs
  useEffect(() => {
    if (dirArr.current[0]) {
      setWalker('true');
      if (
        dirArr.current[0] === 'ArrowRight' ||
        dirArr.current[0] === 'ArrowLeft' ||
        dirArr.current[0] === 'ArrowUp' ||
        dirArr.current[0] === 'ArrowDown'
      ) {
        requestRef.current = requestAnimationFrame(animate);
        return () => cancelAnimationFrame(requestRef.current);
      }
    }

    if (!dirArr.current[0]) {
      setWalker('false');
    }
  }, [tick]);

  //update the style for the mpa character by transforming it according the new x and y variables
  //map and character share the varaibles since they move together
  return (
    <div>
      <div className="camera fade-in">
        <div>
          <div
            className="mapTTS pixel-art"
            style={{
              transform: `translate3d( ${xTransformVar}px, ${yTransformVar}px, 0 )`,
            }}
          >
            {gridArray}
            <div
              className="character pixel-art"
              facing={facing.current}
              walking={walker}
              style={{
                transform: `translate3d( ${600 - xTransformVar}px, ${
                  272 - yTransformVar
                }px, 0 )`,
              }}
            >
              <div className="character_spritesheet pixel-art"></div>
            </div>
          </div>
        </div>
        {textValue ? (
          <dialog className="textBox typewriter" open>
            <p>{textValue}</p>
          </dialog>
        ) : null}
      </div>
    </div>
  );
};

export default TortousTrainStation;
